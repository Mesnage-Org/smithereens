// ^ OTHER OPTION: When cutting bonds, just leave bond-type and donor /
// acceptor info, then later on apply all of the permutations of terminal types
// depending on the bond and bond-direction! Also nice because it stops the
// number of fragments from exploding in this graph-fragmeting stage (which is
// comparatively expensive and slow, vs just generating permutations from a
// list of sub-graphs!)
// Then have these sections?
// 2) ions (which terminal combinations?)
// 3) secondary-losses
// 4) adducts (salts, etc — should protons be hard-coded?)
// -> hmm, but I might also want to specify min and max numbers of Na or K
// 5) methods (maybe here is where I say protons are the charge carrier)
// -> scratch that... One file should mean one polymer-type, one method!

// Goes to a fragmentation-depth of 3 — leave off the max= if you want an 
// unlimited / exhaustive depth! Maybe rename this to depth=?
cleavages max=3 {
    termini {
        /-a lost="OHCHO"
        b lost="OHH"
        /-c lost="OH" gained="NH2"
        /-x lost="HH" gained="CO"
        y lost="H" gained="H"
        /-z lost="HNH2"

        B lost="OHH"
        Y lost="H" gained="H"

        b-lac lost="C3H4O2OHH"
        y-lac lost="H" gained="C3H4O2H" 
    }

    Glycosidic {
        donor "B"
        acceptor "Y"
    }
    Peptide {
        donor /-"a" "b" /-"c"
        acceptor /-"x" "y" /-"z"
    }
    Stem {
        // Is it chemically possible to get non-b or y ions?
        donor "b" "b-lac"
        acceptor "y" "y-lac"
    }
    Crosslink {
        // Does this really always fragment the same? Better keyword than from?
        // Not sure if this sugar is worth it: from "Peptide"
        donor "b"
        acceptor "y"
    }
}

// IMPLEMENTATION: This depends on nothing but the precursor structure, so this
// step can be run in parallel with the rest of the pipeline! At least up until
// the charging / adduct formation step!
// Not 100% sold on that name...
decay-fragments {
    // Is this... Even worth including? I'm leaning towards "no", since if
    // there really are ions that are always in your spectra as background,
    // then perhaps that's outside the scope of this tool? Eh, I don't know,
    // this is pretty "inexpensive" to implement
    background {
        // Whatever you'd like to be included in all of your fragment lists,
        // regardless of the structure being fragmented!
    }
    // Any precursor with a GlcNAc will include these fragments
    residue "g" { // +1: 204.0866
        // By default, I think I should name these as <abbr><fragment #>, so
        // they would be g1, g2, etc here, but you can optionally name them for
        // something like: g1 (<NAME>)
        // From: https://doi.org/10.1021/jasms.2c00172 — a bit sketchy...
        fragment "C8H11N1O4" // +1: 186.0761
        fragment "C8H9N1O3" // +1: 168.0655
        fragment "C6H9O3N1" name="The Annoying One" // +1: 144.066
        fragment "C7H7O2N1" // +1: 138.055
        fragment "C6H7O2N1" // +1: 126.055
    }
    // Any precursor with a "Poly" modification will include these ions
    modification "Poly" {
        // These compositions are charged up / form adducts in the same way as
        // "proper" fragments, but you shouldn't forget to include any inherent
        // charge of the fragment itself (before adduct formation)!
        // I don't actually know if this is chemically correct though...
        fragment "PO3+3e"
    }
}

// Allows for you to remove fragments from the processing pipeline (or
// selectively keep a few) based on a set of fragment queries
filters {
    // If the filter block contains *only* `keep` nodes, then only those
    // fragments will appear in the final list, and all others are implicitly
    // removed. If this were the only node in this block, you'd get only single
    // terminal Y- and y-ions!
    keep {
        termini 1 {
            // Without a number, has defaults to 1 or more
            has "Y" "y"
            // If you wanted to assert something isn't present, for some
            // reason, then you could do:
            /-has 0 "B" "b"
        }
    }
    // If there is a mix of keep and remove blocks, then keep overpowers remove
    // so that this pairing would remove any fragments with GlcNAc except for
    // the fragment that is just GlcNAc on its own
    keep {
        // Keep fragments that are a single GlcNAc
        residue 1 {
            has "g"
        }
    }
    remove {
        // Remove any others with GlcNAc
        residue { // Any size fragment
            has "g" // Any number of GlcNAcs (more than 0)
        }
    }
    // Though, in the above case, the following might be the shorter version:
    remove {
        // The more-than=1 means that the just-g fragment won't be removed
        // (because its total size is 1)
        residue more-than=1 {
            has "g"
        }
    }
    // Just for fun, keep only fragments with a crosslink!
    keep {
        // Any number of bonds is fine — this is by default *zero* or more
        bonds {
            // This is by default *one* or more
            has "Crosslink"
            // ^ This crosslink can be between any two residues!
        }
    }
    // How about just a 3-3 / J-J crosslink?
    keep {
        bonds {
            // You can declare variables that will be solved for:
            residue "mDAP1" "J"
            residue "mDAP2" "J"
            // Then give donors and acceptors!
            has "Crosslink" donor="mDAP1" acceptor="mDAP2"
            // *MORE THOUGHT NEEDED:* How to list multiple bond types and also
            // allow for things to be undirected?
        }
    }
    // Something awful, keep only fragments with a J bound to an A or E via a
    // Crosslink or Peptide bond?
    keep {
        bonds {
            residue "mDAP" "J"
            residue "AorE" "A" "E" // Could be instantiated as either!
            // Maybe let `has` have children here...
            has "Crosslink" "Peptide" { // Either type of bond is fine
                between "mDAP" "AorE"
                // Or you can specify which is acceptor and donor — specifying
                // one of the two is enough, but you can do both, if you'd like
                // All mean the same:
                /-between donor="mDAP" "AorE"
                /-between acceptor="AorE" "mDAP"
                /-between donor="mDAP" acceptor="AorE"
            }
        }
    }
    // No sense in removing things if you're just annotating, but for scoring
    // it can be nice to cut out things that rarely (if-ever) show up! This
    // gets rid of b-ions (larger than one residue) that contain GlcNAc, since
    // GlcNAc falls off incredibly readily!
    remove {
        // Without a number, any number / size is fine; with a number, the
        // count must be exactly equal; otherwise, use more-than or fewer-than

        // Total number of residues must be greater than 1 (not a single "g")
        residues more-than=1 {
            // And at least 1 of those must be "g"
            has more-than=0 "g"
        }
        // If the fragment has only one terminal
        termini 1 {
            // Has without the count again means any number is fine, but we
            // have already checked that the total termini count is 1 at this
            // point, so this will just match either "B" or "b"
            has "B" "b"
        }
    }
    // Here is another way of managing something similar to the above, though
    // I suppose it will catch more things — like internal ions with GlcNAc?
    // I'm mostly just looking to show off this last bit of "query" syntax:
    remove {
        // Undecided if I want to have this actually accept a total number?
        // It would be good for consistency, so sure, either an exact number
        // of bonds, or the same more-than= and fewer-than= from before...
        // Here, any number of total bonds is fine:
        bonds {
            // The `residue` node introduces a binding — the new name "GlcNAc"
            // must, in this case, be a "g" residue.
            residue "GlcNAc" "g"
            // You can allow a binding to be several residues like this:
            /-residue "Basic" "R" "K" "H"
            // Or just declare a residue that can be anything like:
            residue "Anything"
            // We can then as questions about connectivity (giving an edge
            // list to check for) — this is just asking for bond, irrespective
            // of acceptor-donor orientation:
            has "GlcNAc" "Anything"
            // But you could ask for a particular orientation:
            /-has donor="GlcNAc" "Anything"
            // Which is the same as the more explicit:
            /-has donor="GlcNAc" acceptor="Anything"
            // Note that, when instantiating something like "Anything", it
            // must have the same value thoughout the whole of the `bonds`
            // block. As an example, adding the following constraint:
            /-has donor="Anything" "Basic"
            // Would mean that, for this `bonds` block to be satisfied, a
            // "g" would be attached to some residue (which can be anything)
            // but that same residue, whatever it is, is also donating a
            // bond to an "R", "K", or "H"
            // If you but a bond number then, note that that applies to
            // exactly those two residues, so:
            /-has 2 "GlcNAc" "Anything"
            // Would mean there is a *double bond* between that particular
            // GlcNAc and some other residue. If you wanted to express that
            // the GlcNAc is attached to any other two residues, you could
            // write something like:
            /-residue "A1"
            /-residue "A2"
            /-has 1 "GlcNAc" "A1"
            /-has 1 "GlcNAc" "A2"
            // Tecnically this could also mean "A1" == "A2" and there is a
            // single-bond, but I don't know if that sort of negation /
            // disjoint logic is worth the complexity of adding...
            // Let's leave it there, for now...
        }
        // We don't want to wipe out the parent fragment, so make sure
        // there is at least one terminal!
        termini more-than=0
    }
    // remove
    // &
    // keep
}

offsets {

}

// Maybe like this? Those min and max properties aren't always optional...
// You could give just a max= if it's a positive max charge, then the min can
// be assumed 1, or you can give a negative min=, then the max is assumed to be
// -1 charge. So the below could also be just: charges max=5. If you span 0
// with things (e.g. min=-1 max=1), then 0 is excluded? Maybe not, and I just
// return the neutral mass...
// The offsets added during the transformations phase can also be charged, so
// you need to check the charge of each fragment before doing this addition and
// subtraction here!
charges min=1 max=5 {
    // Not giving a max or minimum implies it's free to come in any number!
    p // Can be added or removed in any number!
    // Supplying only min or max implies 0 for the omitted value
    Na-e max=2 // Could be 0, 1, or 2!
    // Could have a minimum too, if you really wanted:
    // Ca-2e min=1 max=3 // Inclusive, so this allows 1, 2, or 3 Ca's
}

// ============================================================================
// ============================================================================
// ============================================================================

// Split into: offsets, decay-ions (name WIP), and filters (also name WIP) 
transformations {
    // This first section applies once for each occurance in a fragment — if
    // you can lose a modifiction, and you have several on one fragment, this
    // will generate fragments with one lost, two lost, etc! One fragment in,
    // can result in several new fragments out! Criteria / filters apply to
    // individual residues / modifications!

    // Implementation-wise, doing this pass first also gives me an excuse to
    // potentially collect some metrics for the whole-fragment tranformations?
    residue {
        // ALLOWED: offset, decay
        // TODO: Add GlcNAc decay here
        // Also add other side-chain losses?
        // And be sure it works for labile modification losses!
    }
    // This processes whole fragments at a time — one fragment in, one added or
    // removed afterwards
    fragment {
        // ALLOWED: offset, remove
        // Without a body, there are no conditions for apply this, so it will
        // apply to every fragment! Every fragment will also have a version
        // that's 18 Da lighter!
        offset lost="H2O"
        // Really not sure how I feel about using "lost" in this position...
        // Do I want to keep this called "lost"? It's consistent at least...
        offset lost="CO" { // The difference between an a and b ion!
            residues 1
            termini 2 {
                // Two total termini, one "b" and one "y"
                has 1 "b"
                has 1 "y"
                // Nodes are ANDed, and arguments are ORed, so one b or y terminal
                // would be: has 1 "b" "y"
            }      
        }
        // Perhaps you've got a simple case where you want to remove a
        // modification from a fragment (it's lost during fragmentation). Here
        // is one way to do that...
        offset lost="PO3" {
            // This matches any total number of modifications
            modification {
                // As long as there is at least 1 "Poly" modification
                has more-than=0 "Poly"
            }
        }
        // No sense in removing things if you're just annotating, but for scoring
        // it can be nice to cut out things that rarely (if-ever) show up! This
        // gets rid of b-ions (larger than one residue) that contain GlcNAc, since
        // GlcNAc falls off incredibly readily!
        remove {
            // Without a number, any number / size is fine; with a number, the
            // count must be exactly equal; otherwise, use more-than or fewer-than

            // Total number of residues must be greater than 1 (not a single "g")
            residues more-than=1 {
                // And at least 1 of those must be "g"
                has more-than=0 "g"
            }
            // If the fragment has only one terminal
            termini 1 {
                // Has without the count again means any number is fine, but we
                // have already checked that the total termini count is 1 at this
                // point, so this will just match either "B" or "b"
                has "B" "b"
            }
        }
        // Here is another way of managing something similar to the above, though
        // I suppose it will catch more things — like internal ions with GlcNAc?
        // I'm mostly just looking to show off this last bit of "query" syntax:
        remove {
            // Undecided if I want to have this actually accept a total number?
            // It would be good for consistency, so sure, either an exact number
            // of bonds, or the same more-than= and fewer-than= from before...
            // Here, any number of total bonds is fine:
            bonds {
                // The `residue` node introduces a binding — the new name "GlcNAc"
                // must, in this case, be a "g" residue.
                residue "GlcNAc" "g"
                // You can allow a binding to be several residues like this:
                /-residue "Basic" "R" "K" "H"
                // Or just declare a residue that can be anything like:
                residue "Anything"
                // We can then as questions about connectivity (giving an edge
                // list to check for) — this is just asking for bond, irrespective
                // of acceptor-donor orientation:
                has "GlcNAc" "Anything"
                // But you could ask for a particular orientation:
                /-has donor="GlcNAc" "Anything"
                // Which is the same as the more explicit:
                /-has donor="GlcNAc" acceptor="Anything"
                // Note that, when instantiating something like "Anything", it
                // must have the same value thoughout the whole of the `bonds`
                // block. As an example, adding the following constraint:
                /-has donor="Anything" "Basic"
                // Would mean that, for this `bonds` block to be satisfied, a
                // "g" would be attached to some residue (which can be anything)
                // but that same residue, whatever it is, is also donating a
                // bond to an "R", "K", or "H"
                // If you but a bond number then, note that that applies to
                // exactly those two residues, so:
                /-has 2 "GlcNAc" "Anything"
                // Would mean there is a *double bond* between that particular
                // GlcNAc and some other residue. If you wanted to express that
                // the GlcNAc is attached to any other two residues, you could
                // write something like:
                /-residue "A1"
                /-residue "A2"
                /-has 1 "GlcNAc" "A1"
                /-has 1 "GlcNAc" "A2"
                // Tecnically this could also mean "A1" == "A2" and there is a
                // single-bond, but I don't know if that sort of negation /
                // disjoint logic is worth the complexity of adding...
                // Let's leave it there, for now...
            }
            // We don't want to wipe out the parent fragment, so make sure
            // there is at least one terminal!
            termini more-than=0
        }
    }
}

// Ugh, I hate it again, let's start anew...
secondary-losses {
    immonium {
        residues 1
        termini 2 {
            // has and has-some are allowed here — nodes are ANDed
            has "b" "y" // Could also be has "b"; has "y"
            // has-some "b" "y" would mean it could be either! Here with the
            // count set to 2, that would mean that "bb", "by", and "yy" match
        }
        lost "CO" // The difference between an a and b ion!
    }
    // No sense in removing things if you're just annotating, but for scoring
    // it can be nice to cut out things that rarely (if-ever) show up!
    no-glcnac-b-ions {
        // Without a number, any number / size is fine, with one is exact, and
        // properties can be used for fewer-than or more-than
        // Any number of "g" residues
        residues {
            has-some "g"
        }
        termini 1 "B" "b"
        remove
    }
}

// This section describes how bonds are broken, and how mass is divided between
// the two newly formed "termini"
cleavages {
    // These are the deltas from full — not-residue — masses
    termini {
        // [N] = "H"
        // [C] = "OH"
        // [M] = "C3H5NO" (Alanine)

        // Peptides ===========================================================
        // Note KDL properties cannot be duplicated! Can only have one `lost`!
        // [N]+[M]-CHO
        a lost="OHCHO"
        // [N]+[M]-H
        b lost="OHH"
        // [N]+[M]+NH2
        c lost="OH" gained="NH2"
        // [C]+[M]+CO-H
        x lost="HH" gained="CO"
        // [C]+[M]+H
        y lost="H" gained="H" // Also allow just: y
        // [C]+[M]-NH2
        z lost="HNH2"

        // Glycans ============================================================
        // Note these are capitalized! The same masses as the peptides, but can
        // be treated differently during the `transformations` step!
        B lost="OHH"
        Y lost="H" gained="H"

        // Peptidoglycan ======================================================
        // These are just like b and y ions, but with an extra C3H4O2
        b-lac lost="C3H4O2OHH"
        y-lac lost="H" gained="C3H4O2H" // This seems correct
    }
    // I could predict intensity by adding that in here... Ugh... No, that
    // would need a different number for each method...
    Glycosidic {
        // QUESTION: Should I ever have anything unpaired here? If not, isn't
        // the `pair` repetitive? Nah, I can have a from?
        pair donor="B" acceptor="Y"
    }
    Peptide {
        pair donor="a" acceptor="x" // Skip these if method disables both terms
        pair donor="b" acceptor="y" // Not skipped in ETD since y is enabled
        // ^ the b ions are just filtered out at the end
        // CORRECTION! I can't skip these, since transformations could rely on
        // some terminals being generated? UPDATE: I think they are still fine
        // to skip, since biologically if a transformation is meant to rely on
        // an ion that's never formed, it probably shouldn't happen?
        pair donor="c" acceptor="z"
    }
    // Oh dear, I really don't know here...
    Stem {
        pair donor="b-lac" acceptor="y-lac"
        pair donor="b" acceptor="y"
        // Also test the other types of peptide fragmentation! `from "Peptide"`
    }
    Crosslink {
        // I also don't know if this is really right... I don't think it is...
        from "Peptide"
    }
}

transformations {
    // The losses in here should have an option to add "related" ions!
    // Still not happy with immonium generation... Feels messy...
    immonium { // Capital or lowercase by convention?
        // For fragments that are a single residue
        size 1
        // Any two paired lowercase / amino-acid termini
        termini 2 {
            one-from "a" "b" "c" // Or expressed as multiple params
            one-from "x" "y" "z" // And expressed as a second line?
        }
        // Change termini to be a and y (an immonium ion)
        transform "a" "b" "c" to="a"
        transform "x" "y" "z" to="y"
    }
    // Should I split things into `if` and `then` blocks?
    phospho-loss {
        modification "Poly"
        lost "PO3"
    }
    // GlcNAc is almost always the first to fall off in HCD, so any fragments
    // that are B or b ions containing GlcNAc (g) and are larger than 1
    // residue, remove them!
    no-glcnac-b-ions {
        // Should have have `contains-all` and `contains-any`, or should I
        // stick with the multiple args for "or" and multiple lines for "and"?
        contains "g"
        size greater-than=1
        termini 1 "B" "b"
        remove
    }
    // TODO: Add something for isoGlu and isoGln from PGN_MS2 — will I want to
    // distinguish these iso versions from the non-iso versions?
}
// Maybe call "adducts" and I should maybe have the add / remove here? Negative
// mode probably needs to be more clever about salt-adducts?
charge-carriers {
    proton "p" // 1+
    sodium "Na-e" // 1+
    calcium "Ca-2e" // 2+
}
// Cutting bonds
ions-series {
    // Do these always come in pairs?
    // Separate naming from ion tags? So you can enable differently
    // for negative or positive mode?
    ax {

    }
    by {
        bond "Peptide" {
            donor "-H"
            acceptor "+H"
        }

        // If charge one, only one of these will actually show up?
    }
    cz {

    }
}
// OR: (But lactyl A seems to work best with a paired model?)
ions {
    b {
        donor "Peptide"
        lost "H"
    }
    y {
        acceptor "Peptide"
        gained "H"
    }
}

// Looking at whole fragments
decay?losses?rearrangments?secondarylosses? {
    water-loss residue="*" {
        lost "H2O"
    }
    sidechain-loss residue="M" {
        lost "..." // Sidechain?
    }
    // Loss / gained in the top?
    // Body is then all of the targeting!
    // modifications can fly off, or lose bits
    // Neutral losses here
    // Oxidised methionine, whole sidechain be me lost
}

charges {
    // Maybe don't do this, but just have the method list a negative charge!
    neg-mode "-p" // This isn't a valid chemical formula...
    proton "p"
    sodium "Na-e"
    calcium "Ca-2e"
    // protons, Na, etc
}

// Enable or disable combinations of all of the above
method? {
    cid {
        termini "b" "y"
        cleavages "Peptide" "Glycosidic"
        secondary-losses "water-loss"
        charge-carriers "proton" "calcium"
        adducts "+p" "+Na" "+Ca"
        charge min=1 max=4 // Redundant with adducts? Or still useful?
        fragmentation-depth?
        // more B here
        // Internal rare
        // For glyco, tips fly off and charge stays behind
    }
    hcd {
        // B tends to be fragile
        // more internal here
    }
    etd {
        ion-series "c" "z" "y"
        // Not really neutral losses here
        // Charge goes with longer piece, one-side will prefer charge
        // Some sites might split the charge 2 into two charged halves
        // Sometimes you can end up with proton getting turned into a hydrogen,
        // so there is a 1Da shift in the ions?
        // Proline and cystine odd here
        // z-ion, n-term C, loses sidechain
    }
}